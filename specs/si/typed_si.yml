- term: negative
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'boolean'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: -(Subj)
- term: negative
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'short'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'short'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: -(Subj)
- term: negative
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'integer'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: -(Subj)
- term: negative
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'long'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'long'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: -(Subj)
- term: negative
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'float'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'float'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: -(Subj)
- term: negative
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'double'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'double'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: -(Subj)
- term: greater_than_or_equal
  syntax:
  - JJ
  arguments:  
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'undefined'
  - symbol: Dat
    primitive_type: 'any'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: (Subj) >= (Dat)
- term: greater_than
  syntax:
  - JJ
  arguments:  
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'any'
  - symbol: Dat
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'expression'
  interpretation: (Subj) > (Dat)
- term: less_than
  syntax:
  - JJ
  arguments:  
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'any'
  - symbol: Dat
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'expression'
  interpretation: (Subj) < (Dat)
- term: less_than_or_equal
  syntax:
  - JJ
  arguments:  
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'any'
  - symbol: Dat
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'expression'
  interpretation: (Subj) <= (Dat)
- term: literal
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: ''
- term: leftp
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'('"
- term: rightp
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "')'"
- term: leftbp
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'['"
- term: rightbp
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "']'"
- term: rightb
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'}'"
- term: leftb
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'{'"
- term: questionmark
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'?'"
- term: asterisk
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'*'"
- term: plus
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'+'"
- term: minus
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'-'"
- term: dot
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'.'"
- term: null
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'array'
  interpretation_type: 'expression'
  interpretation: '(Subj) == null'
- term: null
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'string'
  interpretation_type: 'expression'
  interpretation: '(Subj) == null'
- term: null
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'object'
    type_names:
    - 'list'
    - 'collection'
  interpretation_type: 'expression'
  interpretation: '(Subj) == null'
- term: true
  syntax:
  - JJ
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: 'true'
- term: false
  syntax:
  - JJ
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: 'false'
- term: be
  syntax:
  - VBZ
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'undefined'
  - symbol: y
    primitive_type: 'any'
    reference_type: 'undefined'
  interpretation: (x) == (y)
- term: result
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: \result
- term: prime
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'short'
    reference_type: 'undefined'
  interpretation: (x) == 2 || ((x) > 2 && (\forall int k; (x) > 2 && 2 <= k && k <=
    (x)/2; (x)%k != 0))
- term: prime
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x) == 2 || ((x) > 2 && (\forall int k; (x) > 2 && 2 <= k && k <=
    (x)/2; (x)%k != 0))
- term: prime
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'long'
    reference_type: 'undefined'
  interpretation: (x) == 2 || ((x) > 2 && (\forall int k; (x) > 2 && 2 <= k && k <=
    (x)/2; (x)%k != 0))
- term: even
  syntax:
  - RB
  arguments:
  - symbol: x
    primitive_type: 'short'
    reference_type: 'undefined'
  interpretation: (x) % 2 == 0
- term: even
  syntax:
  - RB
  arguments:
  - symbol: x
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x) % 2 == 0
- term: even
  syntax:
  - RB
  arguments:
  - symbol: x
    primitive_type: 'long'
    reference_type: 'undefined'
  interpretation: (x) % 2 == 0
- term: length
  syntax:
  - NN
  arguments:
  - symbol: '*'
  synthesised_datatype:
    primitive_type: 'relative'
    reference_type: 'relative'
  interpretation: __REL__length
- term: ones_complement
  syntax:
  - NN
  arguments:
  - symbol: '*'
  synthesised_datatype:
    primitive_type: 'relative'
    reference_type: 'relative'
  interpretation: __REL__ones_complement
- term: length_plus1
  syntax:
  - NN
  arguments:
  - symbol: '*'
  synthesised_datatype:
    primitive_type: 'relative'
    reference_type: 'relative'
  interpretation: __REL__length_plus1
- term: first_element
  syntax:
  - NN
  arguments:
  - symbol: '*'
  synthesised_datatype:
    primitive_type: 'relative'
    reference_type: 'relative'
  interpretation: __REL__first_element
- term: number_of_unique_elements
  syntax:
  - NNS
  arguments:
  - symbol: '*'
  synthesised_datatype:
    primitive_type: 'relative'
    reference_type: 'relative'
  interpretation: __REL__number_of_unique_elements
- term: second_element
  syntax:
  - NN
  arguments:
  - symbol: '*'
  synthesised_datatype:
    primitive_type: 'relative'
    reference_type: 'relative'
  interpretation: __REL__second_element
- term: size
  syntax:
  - NN
  arguments:
  - symbol: '*'
  interpretation: __REL__size
- term: value
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: __REL__value
- term: reference
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: (x)
- term: empty
  syntax:
  - JJ
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'array'
  interpretation_type: 'expression'
  interpretation: (x).length == 0
- term: empty
  syntax:
  - JJ
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'list'
  interpretation_type: 'expression'
  interpretation: (x).size() == 0
- term: empty
  syntax:
  - JJ
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'string'
  interpretation_type: 'expression'
  interpretation: (x).length() == 0
- term: empty
  syntax:
  - JJ
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'object'
    type_names:
      - 'list'
      - 'collection'
  interpretation_type: 'expression'
  interpretation: (x).size() == 0
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'integer'
    reference_type: 'undefined'
  - symbol: Dat
    primitive_type: 'integer'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: (Subj) == (Dat)
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'boolean'
    reference_type: 'undefined'
  - symbol: Dat
    primitive_type: 'boolean'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: (Subj) == (Dat)
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'character'
    reference_type: 'undefined'
  - symbol: Dat
    primitive_type: 'character'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: (Subj) == (Dat)
- term: not_equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'undefined'
  - symbol: Dat
    primitive_type: 'any'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: (Subj) != (Dat)
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'array'
  - symbol: Dat
    primitive_type: 'any'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'function'
  interpretation: array_equal
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: Dat
    primitive_type: 'character'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'function'
  interpretation: string_charArray_equal
- term: partially_equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'array'
  - symbol: Dat
    primitive_type: 'any'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'function'
  interpretation: array_partially_equal
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'list'
  - symbol: Dat
    primitive_type: 'any'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'function'
  interpretation: list_2_array_equal
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'list'
  - symbol: Dat
    primitive_type: 'any'
    reference_type: 'string_array'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'function'
  interpretation: list_2_string_array_equal
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: Subj
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: Dat
    primitive_type: 'undefined'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: (Subj).equals((Dat))
- term: __REL__length
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation_type: 'integer'
  interpretation: (x).length
- term: __REL__length
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'string_array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation_type: 'integer'
  interpretation: (x).length
- term: __REL__ones_complement
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'integer'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation_type: 'integer'
  interpretation: ~(x)
- term: __REL__length_plus1
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'undefined'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x).length() + 1
- term: __REL__length_plus1
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x).length + 1
- term: __REL__first_element
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x)[0]
- term: __REL__string_representation
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'integer'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'string'
  interpretation: String.valueOf((x))
- term: __REL__number_of_unique_elements
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (\num_of int i; 0 <= i < (x).length; (\forall int j; 0 <= j < (x).length && j != i; (x)[j] != (x)[i]))
- term: __REL__second_element
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x)[1]
- term: __REL__first_element
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'undefined'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: (x).charAt(0)
- term: __REL__first_element
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'list'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x).get(0)
- term: __REL__length
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'object'
    type_names:
    - 'list'
    - 'collection'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation_type: 'integer'
  interpretation: (x).size()
- term: __REL__length
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'undefined'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation_type: 'integer'
  interpretation: (x).length()
- term: __REL__length
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'list'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation_type: 'integer'
  interpretation: (x).size()
- term: __REL__size
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x).length
- term: __REL__size
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'object'
    type_names:
      - 'list'
      - 'collection'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x).size()
- term: __REL__size
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: (x).length()
- term: element
  syntax:
  - NNS
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: __REL__element
- term: in
  syntax:
  - IN
  arguments:
  - symbol: y
    primitive_type: 'any'
    reference_type: 'array'
  - symbol: Subj
    primitive_type: 'any'
    reference_type: 'object'
    type_names:
    - __REL__element
    - __REL__value
  interpretation_type: 'modifier'
  interpretation: (y)[i]
- term: in
  syntax:
  - IN
  arguments:
  - symbol: e
    interpretation_type: 'expression'
  - symbol: x
    interpretation_type: 'modifier'
  interpretation_type: 'modifier'
  interpretation: __COMP__
- term: Rel
  syntax:
  - Rel
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'any'
  - symbol: y
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: REL(x,y)
- term: keyword_result
  syntax:
  - NN
  arguments:
  - symbol: '*'
  interpretation_type: 'value'
  interpretation: \result
- term: return
  syntax:
  - VBN
  arguments:
  - symbol: '*'
  interpretation_type: 'value'
  interpretation: \result
- term: of
  syntax:
  - IN
  arguments:
  - symbol: x
    primitive_type: 'event'
    reference_type: 'any'
  - symbol: y
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: __ABSTRACT__
- term: to
  syntax:
  - TO
  arguments:
  - symbol: x
    primitive_type: 'event'
    reference_type: 'any'
  - symbol: y
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: __ABSTRACT__
- term: of
  syntax:
  - IN
  arguments:
  - symbol: x
    primitive_type: 'relative'
    reference_type: 'relative'
  - symbol: y
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'modifier'
  interpretation: __INVOKE__REL__
- term: __REL__element
  syntax:
  - NNS
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: (x)[i]
- term: __REL__element
  syntax:
  - NNS
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'any'
  interpretation: (x).charAt(i)
- term: __REL__element
  syntax:
  - NNS
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'list'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'undefined'
  interpretation: (x).get(i)
- term: __REL__element
  syntax:
  - NNS
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'object'
    type_names:
    - 'list'
    - 'collection'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: (x).get(i)
- term: __REL__value
  syntax:
  - NNS
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: \forall int i; 0 <= i < (x).length; (x)[i]
- term: __REL__value
  syntax:
  - NNS
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'list'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: \forall int i; 0 <= i < (x).size(); (x).get(i)
- term: __REL__value
  syntax:
  - NNS
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: \forall int i; 0 <= i < (x).length(); (x).charAt(i)
- term: __REL__value
  syntax:
  - NNS
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'object'
    type_names:
    - 'list'
    - 'collection'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'undefined'
  interpretation_type: 'modifier'
  interpretation: \forall int i; 0 <= i < (x).size(); (x).get(i)
- term: unique
  syntax:
  - JJ
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'list'
  interpretation_type: 'expression_requires_param'
  interpretation: \forall int i; 0 <= i < (x).size(); (\forall int j; 0 <= j < (x).size() && j != i; (x).get(j) != (x).get(j))
- term: unique
  syntax:
  - JJ
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'object'
    lazy_resolve: __REF__type
    type_names:
    - 'list'
    - 'collection'
  interpretation_type: 'expression'
  interpretation: \forall int i; 0 <= i < (x).size(); (\forall int j; 0 <= j < (x).size() && j != i; (x).get(j) != (x).get(i))
- term: unique
  syntax:
  - JJ
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'array'
  interpretation_type: 'expression_requires_param'
  interpretation: \forall int i; 0 <= i < (x).length; (\forall int j; 0 <= j < (x).length && j != i; (x)[j] != (x)[i])
- term: sum
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'array'
    lazy_resolve: __REF__type
  interpretation_type: 'expression'
  interpretation: \sum int i; 0 <= i < __REF__type.length; (x)
- term: evenly_divided
  syntax:
  - VBN
  arguments:
  - symbol: Subj
    primitive_type: 'integer'    
    reference_type: 'undefined'
  - symbol: Acc
    primitive_type: 'integer'    
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: (Acc) % (Subj) == 0
- term: comma
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_char'
  interpretation: "','"
- term: commas
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_char'
  interpretation: "','"
- term: period
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_char'
  interpretation: "'.'"
- term: periods
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_char'
  interpretation: "'.'"
- term: plus_sign
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_char'
  interpretation: "'+'"
- term: dot_sign
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_char'
  interpretation: "'.'"
- term: minus_sign
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_char'
  interpretation: "'-'"
- term: alphabet
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'java_method'
  interpretation: 'Character.isLetter'
- term: alphabets
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'java_method'
  interpretation: 'Character.isLetter'
- term: digit
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'java_method'
  interpretation: 'Character.isDigit'
- term: digits
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'java_method'
  interpretation: 'Character.isDigit'
- term: alphanumeric
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'java_method'
  interpretation: 'Character.isLetter'
- term: space
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'java_method'
  interpretation: 'Character.isWhitespace'
- term: spaces
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_method'
  interpretation: 'Character.isWhitespace'
- term: symbol
  syntax:
  - NN
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_method_chain'
  interpretation: " && ,!Character.isLetter,!Character.isWhitespace"
- term: lowercase_alphabets
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_method'
  interpretation: 'Character.isLowerCase'
- term: uppercase_alphabets
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_method'
  interpretation: 'Character.isUpperCase'
- term: uppercase_alphabet
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'java_method'
  interpretation: 'Character.isUpperCase'
- term: contain_only
  syntax:
  - VBP
  arguments:
  - symbol: 'Subj'
    primitive_type: 'character'
    reference_type: 'undefined'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'java_method'
  interpretation_type: 'expression_requires_param'
  interpretation: '\forall int i; 0 <= i < (Subj).length(); (Acc)((Subj).charAt(i))'
- term: contain_only
  syntax:
  - VBZ
  - VB
  - VBP
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
    interpretation_type: 'direct'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'java_method'
  interpretation: '\forall int i; 0 <= i < (Subj).length(); (Acc)((Subj).charAt(i))'
- term: contain_only
  syntax:
  - VBZ
  - VB
  - VBP
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
    interpretation_type: 'direct'
  - symbol: 'Acc'
    primitive_type: 'character'
    reference_type: 'array'
  interpretation_type: 'function'
  interpretation: 'contain_only_string_chararray'
- term: contain
  syntax:
  - VBZ
  - VB
  - VBP
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'character'
    reference_type: 'array'
  interpretation_type: 'function'
  interpretation: 'contain_only_string_chararray'
- term: contain_only
  syntax:
  - VBZ
  - VB
  - VBP
  arguments:
  - symbol: 'Subj'
    primitive_type: 'any'
    reference_type: 'list'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'character'
    reference_type: 'undefined'
  - symbol: 'Acc'
    primitive_type: 'character'
    reference_type: 'array'
    interpretation_type: 'undefined'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: contain_only
  syntax:
  - VBZ
  - VB
  - VBP
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'array'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'undefined'
    interpretation_type: 'undefined'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: equal
  syntax:
  - JJ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
    interpretation_type: 'direct'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: not_equal
  syntax:
  - JJ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'undefined'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: contain
  syntax:
  - VBZ
  - VB
  - VBP
  arguments:
  - symbol: 'Subj'
    primitive_type: 'any'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: contain_only
  syntax:
  - VBZ
  - VB
  - VBP
  - VBG
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'character'
    reference_type: 'undefined'
    interpretation_type: 'undefined'
  spec_init_type: 'char'
  interpretation: '\forall int i; 0 <= i < (Subj).length(); (Acc) == (Subj).charAt(i)'
- term: contain
  syntax:
  - VBZ
  - VB
  - VBP
  - VBG
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    interpretation_type: 'java_method'
  spec_init_type: 'char'
  interpretation: '\exists int i; 0 <= i < (Subj).length(); (Acc)((Subj).charAt(i))'
- term: contain
  syntax:
  - VBZ
  - VB
  - VBP
  - VBG
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'character'
    reference_type: 'undefined'
    interpretation_type: 'undefined'
  interpretation: '\exists int i; 0 <= i < (Subj).length(); ((Subj).charAt(i) == (Acc))'
- term: contain
  syntax:
  - VBZ
  - VB
  - VBP
  - VBG
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'string'
    interpretation_type: 'undefined'
  interpretation: '(Acc) != null && (Subj) != null && (Acc).length() <= (Subj).length() && (\exists int i; 0 <= i && i <= (Subj).length() - (Acc).length(); (\forall int j; 0 <= j && j < (Acc).length(); (Subj).charAt(i + j) == (Acc).charAt(j)))'
- term: contain
  syntax:
  - VBN
  arguments:
  - symbol: 'Acc'
    primitive_type: 'integer'
    reference_type: 'undefined'
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'array'
  interpretation: '\exists int i; 0 <= i < (Subj).length; (Subj)[i] == (Acc)'
- term: contain
  syntax:
  - VBN
  arguments:
  - symbol: 'Dat'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'string'
    interpretation_type: 'undefined'
  interpretation: '(Acc) != null && (Dat) != null && (Acc).length() <= (Dat).length() && (\exists int i; 0 <= i && i <= (Dat).length() - (Acc).length(); (\forall int j; 0 <= j && j < (Acc).length(); (Dat).charAt(i + j) == (Acc).charAt(j)))'
- term: contain
  syntax:
  - VBN
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'array'
  - symbol: 'Acc'
    primitive_type: 'integer'
    reference_type: 'array'
  interpretation: '\forall int i; 0 <= i < (Acc).length; \exists int j; 0 <= j < (Subj).length; (Subj)[j] == (Acc)[i]'
- term: accontain
  syntax:
  - VBZ
  - VB
  - VBP
  - VBG
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'string'
  interpretation: 'Arrays.asList((Subj).toCharArray()).containsAll(Arrays.asList((Acc).toCharArray()))'
- term: positive
  syntax:
  - JJ
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: '(x) >= 0'
- term: empty_str
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'string'
  interpretation: '""'
- term: match
  syntax:
  - VB
  - VBZ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation: '(Subj).matches((Acc))'
- term: range
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: __ABSTRACT__range
- term: summation
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation: __REL__sum
- term: __ABSTRACT__range
  syntax:
  - NN
  arguments:
  - symbol: 'of'
    primitive_type: 'integer'
    reference_type: 'undefined'
  - symbol: 'to'
    primitive_type: 'integer'
    reference_type: 'undefined'
  - symbol: 'ex_Subj'
    primitive_type: 'integer'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation: '((ex_Subj) >= (of)) && ((ex_Subj) <= (to))'
- term: __ABSTRACT__summation
  syntax:
  - NN
  arguments:
  - symbol: 'ex_Subj'
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: '\sum int i; 0 <= i < (ex_Subj).length; (ex_Subj)[i]'
- term: __REL__sum
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: '(\sum int i; 0 <= i < (x).length; (x)[i])'
- term: __REL__sum
  syntax:
  - NN
  arguments:
  - symbol: x
    primitive_type: 'any'
    reference_type: 'list'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: '(\sum int i; 0 <= i < (x).size(); (x).get(i))'
- term: HYPHEN
  syntax:
  - IN
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'undefined'
  - symbol: 'Prep'
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: '(Subj) - (Prep)'
- term: plus
  syntax:
  - IN
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'undefined'
  - symbol: 'Prep'
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: '(Subj) + (Prep)'
- term: in
  syntax:
  - IN
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'undefined'
  - symbol: 'Abstract'
    primitive_type: 'any'
    reference_type: 'undefined'
  interpretation: '__ABSTRACT__'
- term: single_zero
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__single_zero'
- term: printable_ascii_characters
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__printable_ASCII_characters'
- term: __TEMPLATE__single_zero
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'any'
    reference_type: 'list'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '(x).size() == 1 && (x).get(0) == 0'
- term: __TEMPLATE__single_zero
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '(x).length == 1 && (x)[0] == 0'
- term: __TEMPLATE__single_zero
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'undefined'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: "(x).length() == 1 && (x).charAt(0) == '0'"
- term: __TEMPLATE__printable_ASCII_characters
  syntax:
  - NNS
  arguments:
  - symbol: 'x'
    primitive_type: 'any'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '\forall int i; 0 <= i < (x).length(); (x).charAt(i) >= 32 && (x).charAt(i) <= 126'
- term: binary_string_length_32
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__binary_string_length_32'
- term: __TEMPLATE__binary_string_length_32
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'string'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '(x).length() ==  && (\forall int i; 0 <= i < (x).length(); (x).charAt(i) == 0 || (x).charAt(i) == 1)'
- term: represent
  syntax:
  - VBN
  arguments:
  - symbol: 'Subj'
    primitive_type: 'string'
    reference_type: 'undefined'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: contain_only
  syntax:
  - VBZ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: sort
  syntax:
  - VBN
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'array'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'function'
  interpretation: 'contain_only_template'
- term: ascending_order
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__ascending_order'
- term: descending_order
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__descending_order'
- term: __TEMPLATE__ascending_order
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '\forall int i; 0 <= i < (x).length-1; (x)[i] <= (x)[i+1]'
- term: __TEMPLATE__ascending_order
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'any'
    reference_type: 'list'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '\forall int i; 0 <= i < (x).size()-1; (x).get(i) <= (x).get(i + 1)'
- term: __TEMPLATE__descending_order
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '\forall int i; 0 <= i < (x).length-1; (x)[i] >= (x)[i+1]'
- term: __TEMPLATE__descending_order
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'any'
    reference_type: 'list'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '\forall int i; 0 <= i < (x).size()-1; (x).get(i) >= (x).get(i + 1)'
- term: perfect_square
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__perfect_square'
- term: __TEMPLATE__perfect_square
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '\exists int i; 0 <= i <= (x); i*i == (x)'
- term: minimum_value
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'template'
  interpretation: '__REL__minimum_value'
- term: string_representation
  syntax:
  - NN
  arguments:
  - symbol: '*'
  synthesised_datatype:
    primitive_type: 'relative'
    reference_type: 'relative'
  interpretation: __REL__string_representation
- term: __REL__minimum_value
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation_type: 'integer'
  interpretation: '(\min int i; 0 <= i < (x).length; (x)[i])'
- term: greater_than_or_equal
  syntax:
  - JJ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'undefined'
    interpretation_type: 'undefined'
  - symbol: 'Dat'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'template'
  interpretation_type: 'expression'
  interpretation: '(Subj) >= (Dat)'
- term: base_7_representation
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__base_7_representation'
- term: __TEMPLATE__base_7_representation
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'string'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: 'Integer.toString((x), 7)'
- term: lowercase_hexadecimal_digits
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__lowercase_hexadecimal_digits'
- term: __TEMPLATE__lowercase_hexadecimal_digits
  syntax:
  - NNS
  arguments:
  - symbol: 'x'
    primitive_type: 'any'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '\forall int i; 0 <= i < (x).length(); (x).charAt(i) >= 48 && (x).charAt(i) <= 57 || (x).charAt(i) >= 97 && (x).charAt(i) <= 102'
- term: +
  syntax:
  - VBD
  arguments:
  - symbol: 'Subj'
    primitive_type: 'integer'
    reference_type: 'undefined'
  - symbol: 'Acc'
    primitive_type: 'integer'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'integer'
    reference_type: 'undefined'
  interpretation: '(Subj) + (Acc)'
- term: +
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'undefined'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'undefined'
  interpretation: "'+'"
- term: leading_or_trailing_spaces
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__leading_or_trailing_spaces'
- term: __TEMPLATE__leading_or_trailing_spaces
  syntax:
  - NNS
  arguments:
  - symbol: 'x'
    primitive_type: 'any'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '(x) != null && (x).length() > 0 && ((x).charAt(0) == 32 || (x).charAt((x).length()-1) == 32)'
- term: vocontain
  syntax:
  - VBZ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'java_method'
  interpretation: '(Subj) != null && (Subj).length() > 0 && (\forall int i; 0 <= i < (Subj).length(); (Acc)((Subj).charAt(i)))'
- term: is
  syntax:
  - VBZ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'character'
    reference_type: 'undefined'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'java_method'
  interpretation: '(Acc)((Subj))'
- term: nonrepeating_character
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__nonrepeating_character'
- term: __TEMPLATE__nonrepeating_character
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'any'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '\forall int i; 0 <= i < (x).length(); (\forall int j; 0 <= j < (x).length() && j != i; (x).charAt(j) != (x).charAt(i))'
- term: single_digit
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__single_digit'
- term: __TEMPLATE__single_digit
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'undefined'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '(x) >= 0 && (x) <= 9'
- term: all_types_parentheses
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'character'
    reference_type: 'array'
  interpretation: or,'(',')','[',']','{','}'
- term: non_negative_integers
  syntax:
  - NNS
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__non_negative_integers'
- term: __TEMPLATE__non_negative_integers
  syntax:
  - NNS
  arguments:
  - symbol: 'x'
    primitive_type: 'any'
    reference_type: 'list'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '(x) != null && (x).size() > 0 && (\forall int i; 0 <= i < (x).size(); (x).get(i) >= 0)'
- term: checking_integer
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'template'
  interpretation: '__TEMPLATE__checking_integer'
- term: __TEMPLATE__checking_integer
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'array'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: '(x) != null && (x).length > 0 && (\forall int i; 0 <= i < (x).length; (x)[i] == (int)(x)[i])'
- term: arithexprspace
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  interpretation_type: 'template'
  interpretation: __TEMPLATE__arithexprspace
- term: __TEMPLATE__arithexprspace
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'undefined'
    reference_type: 'string'
  synthesised_datatype:
    primitive_type: 'boolean'
    reference_type: 'undefined'
  interpretation_type: 'expression'
  interpretation: "(x) != null && (x).length() > 0 && (\\forall int i; 0 <= i < (x).length(); Character.isDigit((x).charAt(i)) || (x).charAt(i) == ' ' || (x).charAt(i) == '+' || (x).charAt(i) == '-' || (x).charAt(i) == '*' || (x).charAt(i) == '/')"
- term: checking_csv
  syntax:
  - NN
  arguments:
  - symbol: '*'
    primitive_type: 'any'
    reference_type: 'any'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'undefined'
  interpretation_type: 'construct'
  interpretation: csvdata
- term: contain
  syntax:
  - VBZ
  arguments:
  - symbol: 'Subj'
    primitive_type: 'undefined'
    reference_type: 'string'
  - symbol: 'Acc'
    primitive_type: 'undefined'
    reference_type: 'undefined'
    interpretation_type: 'construct'
  interpretation_type: 'function'
  interpretation: contain_string_construct
- term: hexadecimal_representation
  syntax:
  - NN
  arguments:
  - symbol: '*'
  synthesised_datatype:
    primitive_type: 'relative'
    reference_type: 'relative'
  interpretation: __REL__hexadecimal_representation
- term: __REL__hexadecimal_representation
  syntax:
  - NN
  arguments:
  - symbol: 'x'
    primitive_type: 'integer'
    reference_type: 'undefined'
    interpretation_type: 'direct'
  synthesised_datatype:
    primitive_type: 'undefined'
    reference_type: 'string'
  interpretation: 'string'
  interpretation: 'Integer.toHexString((x))'