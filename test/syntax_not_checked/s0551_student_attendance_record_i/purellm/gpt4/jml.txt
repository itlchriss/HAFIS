To convert the given problem description into JML (Java Modeling Language), we need to specify the preconditions, postconditions, and invariants that describe the behavior of the function. Here's how you can express the problem in JML:

```java
/*@ requires s != null;
  @ requires s.length() >= 1 && s.length() <= 1000;
  @ requires (\forall int i; 0 <= i && i < s.length(); 
  @           s.charAt(i) == 'A' || s.charAt(i) == 'L' || s.charAt(i) == 'P');
  @
  @ ensures \result == true <==> 
  @         (\num_of(int i; 0 <= i && i < s.length(); s.charAt(i) == 'A') < 2) &&
  @         (\forall int i; 0 <= i && i <= s.length() - 3; 
  @           !(s.charAt(i) == 'L' && s.charAt(i+1) == 'L' && s.charAt(i+2) == 'L'));
  @*/
public boolean checkRecord(String s) {
    int absences = 0;
    int consecutiveLates = 0;
    
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == 'A') {
            absences++;
            if (absences >= 2) {
                return false;
            }
        }
        
        if (s.charAt(i) == 'L') {
            consecutiveLates++;
            if (consecutiveLates >= 3) {
                return false;
            }
        } else {
            consecutiveLates = 0;
        }
    }
    
    return true;
}
```

### Explanation:

- **Preconditions (`requires`)**:
  - The string `s` is not null.
  - The length of `s` is between 1 and 1000.
  - Each character in `s` is either 'A', 'L', or 'P'.

- **Postconditions (`ensures`)**:
  - The result is `true` if and only if:
    - The number of 'A's in `s` is strictly less than 2.
    - There is no occurrence of three consecutive 'L's in `s`.

The JML annotations describe the conditions under which the function operates and the expected outcome based on the input.