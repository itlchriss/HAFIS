To convert the given problem description into JML (Java Modeling Language), we need to specify the preconditions, postconditions, and any invariants that describe the behavior of the function that converts an Excel column title to its corresponding column number. Here's how you might express this in JML:

```java
public class ExcelSheetColumnNumber {

    /*@ 
      @ public normal_behavior
      @ requires columnTitle != null;
      @ requires columnTitle.length() >= 1 && columnTitle.length() <= 7;
      @ requires (\forall int i; 0 <= i && i < columnTitle.length(); 
      @           'A' <= columnTitle.charAt(i) && columnTitle.charAt(i) <= 'Z');
      @ ensures \result == (\sum int i; 0 <= i && i < columnTitle.length(); 
      @                     (columnTitle.charAt(i) - 'A' + 1) * 
      @                     (int) Math.pow(26, columnTitle.length() - i - 1));
      @*/
    public int titleToNumber(String columnTitle) {
        int result = 0;
        for (int i = 0; i < columnTitle.length(); i++) {
            result = result * 26 + (columnTitle.charAt(i) - 'A' + 1);
        }
        return result;
    }
}
```

### Explanation:

- **Preconditions (`requires`)**:
  - The `columnTitle` must not be null.
  - The length of `columnTitle` must be between 1 and 7.
  - Each character in `columnTitle` must be an uppercase English letter ('A' to 'Z').

- **Postconditions (`ensures`)**:
  - The result is calculated as the sum of each character's contribution to the column number. Each character contributes its position in the alphabet (1 for 'A', 2 for 'B', etc.) multiplied by 26 raised to the power of its position from the right end of the string.

This JML specification describes the expected behavior of the `titleToNumber` method, ensuring that it correctly computes the column number for a given Excel column title.