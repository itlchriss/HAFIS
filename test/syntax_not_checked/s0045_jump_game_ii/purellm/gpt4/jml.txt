To convert the given problem description into JML (Java Modeling Language), we need to specify the preconditions, postconditions, and invariants that describe the behavior of the function solving the problem. Here's a possible JML specification for the "Jump Game II" problem:

```java
/*@
  @ requires nums != null;
  @ requires nums.length >= 1 && nums.length <= 10000;
  @ requires (\forall int i; 0 <= i < nums.length; 0 <= nums[i] <= 1000);
  @
  @ ensures \result >= 0;
  @ ensures \result == (\min int j; 0 <= j < nums.length; canReachLastIndex(nums, j); j);
  @
  @ also
  @
  @ signals (Exception e) false;
  @
  @ pure model boolean canReachLastIndex(int[] nums, int jumps) {
  @   // This model method checks if the last index can be reached with the given number of jumps
  @   int currentPosition = 0;
  @   for (int i = 0; i < jumps; i++) {
  @     int maxReach = 0;
  @     for (int j = currentPosition; j <= currentPosition + nums[currentPosition] && j < nums.length; j++) {
  @       maxReach = Math.max(maxReach, j + nums[j]);
  @     }
  @     currentPosition = maxReach;
  @     if (currentPosition >= nums.length - 1) {
  @       return true;
  @     }
  @   }
  @   return false;
  @ }
  @*/
public int jump(int[] nums) {
    // Implementation of the function to find the minimum number of jumps
    int jumps = 0, currentEnd = 0, farthest = 0;
    for (int i = 0; i < nums.length - 1; i++) {
        farthest = Math.max(farthest, i + nums[i]);
        if (i == currentEnd) {
            jumps++;
            currentEnd = farthest;
        }
    }
    return jumps;
}
```

### Explanation:

- **Preconditions (`requires`)**: 
  - The input array `nums` must not be null.
  - The length of `nums` must be between 1 and 10,000.
  - Each element in `nums` must be between 0 and 1,000.

- **Postconditions (`ensures`)**:
  - The result (`\result`) must be non-negative.
  - The result is the minimum number of jumps required to reach the last index, as defined by the model method `canReachLastIndex`.

- **Model Method (`canReachLastIndex`)**:
  - This is a pure method used to express the condition that the last index can be reached with a given number of jumps.
  - It simulates the jumping process to check if the last index can be reached within the specified number of jumps.

- **Exception Handling (`signals`)**:
  - The specification states that no exceptions should be thrown by the method.

This JML specification provides a formal contract for the `jump` method, ensuring that it behaves as expected according to the problem description.