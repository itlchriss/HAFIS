To convert the given problem description into JML (Java Modeling Language), we need to specify the preconditions, postconditions, and any invariants that describe the behavior of the method. Here's how you might express this in JML:

```java
public class ExcelSheetColumnTitle {

    /*@ 
      @ public normal_behavior
      @ requires 1 <= columnNumber && columnNumber <= Integer.MAX_VALUE;
      @ ensures \result != null && \result.length() > 0;
      @ ensures (\forall int i; 0 <= i && i < \result.length(); 
      @          'A' <= \result.charAt(i) && \result.charAt(i) <= 'Z');
      @ ensures (\forall int i; 0 <= i && i < \result.length() - 1; 
      @          \result.charAt(i) != 'Z' ==> 
      @          \result.charAt(i+1) == 'A');
      @*/
    public static String convertToTitle(int columnNumber) {
        StringBuilder title = new StringBuilder();
        while (columnNumber > 0) {
            columnNumber--; // Adjust for 0-based index
            int remainder = columnNumber % 26;
            title.append((char) ('A' + remainder));
            columnNumber /= 26;
        }
        return title.reverse().toString();
    }
}
```

### Explanation:

- **Precondition (`requires`)**: The input `columnNumber` must be between 1 and `Integer.MAX_VALUE` (which is `2^31 - 1`), as specified in the problem constraints.

- **Postcondition (`ensures`)**:
  - The result is not null and has a length greater than 0.
  - Each character in the result is an uppercase letter between 'A' and 'Z'.
  - For any character in the result that is not 'Z', the next character (if it exists) should be 'A'. This condition helps ensure the correct sequence of letters, similar to how numbers roll over (e.g., 'Z' to 'AA').

This JML specification describes the expected behavior of the `convertToTitle` method, ensuring it adheres to the problem's requirements.