./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:30: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method fourSumCount
                int sum = k / i;
                            ^
./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:40: verify: The prover cannot establish an assertion (Postcondition: ./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:22:) in method fourSumCount
        return count;
        ^
./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:22: verify: Associated declaration: ./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:40:
//@ ensures(\result >= 0);
    ^
./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:40: verify: The prover cannot establish an assertion (Postcondition: ./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:23:) in method fourSumCount
        return count;
        ^
./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:23: verify: Associated declaration: ./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:40:
//@ ensures((nums1[0] == 0 && nums1.length == 1) && ((nums2[0] == 0 && nums2.length == 1) && ((nums3[0] == 0 && nums3.length == 1) && ((nums4[0] == 0 && nums4.length == 1) && (\result == 1)))));
    ^
./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:40: verify: The prover cannot establish an assertion (Postcondition: ./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:24:) in method fourSumCount
        return count;
        ^
./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:24: verify: Associated declaration: ./test/mutation_analysis/s0454_4sum_ii/hafis/ablation_o3_r50/mutants/3/Solution.java:40:
//@ ensures((nums1[0] == 1 && nums1[1] == 2 && nums1.length == 2) && ((nums2[0] == -2 && nums2[1] == -1 && nums2.length == 2) && ((nums3[0] == -1 && nums3[1] == 2 && nums3.length == 2) && ((nums4[0] == 0 && nums4[1] == 2 && nums4.length == 2) && (\result == 2)))));
    ^
7 verification failures
