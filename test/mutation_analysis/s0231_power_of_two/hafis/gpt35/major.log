[01/25 01:55:53] [INFO   ] org.mutationtesting.major.plugin.MajorPluginTaskListener.<init>:
    Created MajorPluginTaskListener with options: [mml:../major/mml/all.mml.bin]
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.initOperatorSymbols:
    Initializing operator symbols for opcode mapping
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.mutateTree:
    Mutating tree: Env[AttrContext[Scope[super, this]],outer=Env[AttrContext[Scope[java.util.Collections, java.util.Arrays, g0201_0300.s0231_power_of_two.Solution]]]]
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.visitClassDef:
    CLASS: g0201_0300.s0231_power_of_two.Solution
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.visitMethodDef:
    METHOD: <init>([])null
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.visitMethodDef:
    METHOD: isPowerOfTwo([int n])boolean
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 1
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 1: Solution.isPowerOfTwo(line 13, col 15)
            mutation operator group:   ROR
            mutation operator:         <=(int,int) |==> <(int,int)
            original:                  n <= 0 
            mutant:                    n < 0
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 2
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 2: Solution.isPowerOfTwo(line 13, col 15)
            mutation operator group:   ROR
            mutation operator:         <=(int,int) |==> ==(int,int)
            original:                  n <= 0 
            mutant:                    n == 0
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 3
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 3: Solution.isPowerOfTwo(line 13, col 15)
            mutation operator group:   ROR
            mutation operator:         <=(int,int) |==> TRUE(int,int)
            original:                  n <= 0 
            mutant:                    true
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 4
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutantSTD:
    Logging mutantSTD 4: (STD) return false; -> <NO-OP>
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 5
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 5: Solution.isPowerOfTwo(line 17, col 19)
            mutation operator group:   ROR
            mutation operator:         ==(int,int) |==> <=(int,int)
            original:                  n == 1 
            mutant:                    n <= 1
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 6
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 6: Solution.isPowerOfTwo(line 17, col 19)
            mutation operator group:   ROR
            mutation operator:         ==(int,int) |==> >=(int,int)
            original:                  n == 1 
            mutant:                    n >= 1
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 7
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 7: Solution.isPowerOfTwo(line 17, col 19)
            mutation operator group:   ROR
            mutation operator:         ==(int,int) |==> FALSE(int,int)
            original:                  n == 1 
            mutant:                    false
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 8
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutantSTD:
    Logging mutantSTD 8: (STD) return true; -> <NO-OP>
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 9
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 9: Solution.isPowerOfTwo(line 20, col 19)
            mutation operator group:   AOR
            mutation operator:         %(int,int) |==> *(int,int)
            original:                  n % 2 
            mutant:                    n * 2
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 10
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 10: Solution.isPowerOfTwo(line 20, col 19)
            mutation operator group:   AOR
            mutation operator:         %(int,int) |==> +(int,int)
            original:                  n % 2 
            mutant:                    n + 2
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 11
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 11: Solution.isPowerOfTwo(line 20, col 19)
            mutation operator group:   AOR
            mutation operator:         %(int,int) |==> -(int,int)
            original:                  n % 2 
            mutant:                    n - 2
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 12
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 12: Solution.isPowerOfTwo(line 20, col 19)
            mutation operator group:   AOR
            mutation operator:         %(int,int) |==> /(int,int)
            original:                  n % 2 
            mutant:                    n / 2
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 13
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 13: Solution.isPowerOfTwo(line 20, col 23)
            mutation operator group:   ROR
            mutation operator:         ==(int,int) |==> <=(int,int)
            original:                  n % 2 == 1 
            mutant:                    n % 2 <= 1
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 14
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 14: Solution.isPowerOfTwo(line 20, col 23)
            mutation operator group:   ROR
            mutation operator:         ==(int,int) |==> >=(int,int)
            original:                  n % 2 == 1 
            mutant:                    n % 2 >= 1
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 15
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutant:
    Logging mutant 15: Solution.isPowerOfTwo(line 20, col 23)
            mutation operator group:   ROR
            mutation operator:         ==(int,int) |==> FALSE(int,int)
            original:                  n % 2 == 1 
            mutant:                    false
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 16
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutantSTD:
    Logging mutantSTD 16: (STD) return false; -> <NO-OP>
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.nextMutant:
    Creating mutant 17
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.mutation.Mutator.logMutantSTD:
    Logging mutantSTD 17: (STD) n /= 2; -> <NO-OP>
[01/25 01:55:54] [INFO   ] org.mutationtesting.major.plugin.MajorPluginTaskListener.mutate:
    Generated 17 mutants (74 ms)
