To convert the given problem description into JML (Java Modeling Language), we need to specify the preconditions, postconditions, and any invariants that describe the behavior of the function that solves the problem. Here's how you might express this in JML:

```java
/*@
  requires s != null && s.length() >= 1 && s.length() <= 100000;
  requires (\forall int i; 0 <= i && i < s.length(); s.charAt(i) == '(' || s.charAt(i) == ')');
  requires isValidParenthesesString(s);
  
  ensures (\forall int i; 0 <= i && i < \result.length(); \result.charAt(i) == '(' || \result.charAt(i) == ')');
  ensures isValidParenthesesString(\result);
  ensures \result.length() <= s.length();
  ensures (\forall int i; 0 <= i && i < s.length(); 
             (\exists int j, k; 0 <= j && j < k && k <= s.length() && isPrimitive(s.substring(j, k)) && 
              \result.equals(removeOutermostParentheses(s.substring(j, k)))));
  
  // Helper predicates
  predicate isValidParenthesesString(String str) =
    (\forall int i; 0 <= i && i < str.length(); str.charAt(i) == '(' || str.charAt(i) == ')') &&
    (\forall int i; 0 <= i && i < str.length(); 
      (\num_of('(', str, 0, i) >= \num_of(')', str, 0, i))) &&
    (\num_of('(', str, 0, str.length()) == \num_of(')', str, 0, str.length()));
  
  predicate isPrimitive(String str) =
    isValidParenthesesString(str) &&
    (\forall int j, k; 0 < j && j < k && k < str.length(); 
      !isValidParenthesesString(str.substring(j, k)));
  
  // Helper function
  model String removeOutermostParentheses(String str) {
    return str.substring(1, str.length() - 1);
  }
@*/
public String removeOuterParentheses(String s) {
    // Implementation of the function
}
```

### Explanation:

- **Preconditions (`requires`)**:
  - The input string `s` is not null and its length is between 1 and 100,000.
  - Every character in `s` is either '(' or ')'.
  - `s` is a valid parentheses string, as defined by the `isValidParenthesesString` predicate.

- **Postconditions (`ensures`)**:
  - The result is a valid parentheses string.
  - The length of the result is less than or equal to the length of `s`.
  - For every primitive substring of `s`, the result is equivalent to removing the outermost parentheses of that substring.

- **Helper Predicates**:
  - `isValidParenthesesString`: Checks if a string is a valid parentheses string.
  - `isPrimitive`: Checks if a string is a primitive valid parentheses string.

- **Helper Function**:
  - `removeOutermostParentheses`: A model function that simulates removing the outermost parentheses from a string.

This JML specification provides a formal contract for the `removeOuterParentheses` function, ensuring it behaves as expected according to the problem description.