Thinking...Thinking...Thinking...Thinking...Thinking...Thinking... (1s elapsed)Thinking... (1s elapsed)Thinking... (1s elapsed)Thinking... (1s elapsed)Thinking... (1s elapsed)Thinking... (2s elapsed)Thinking... (2s elapsed)Thinking... (2s elapsed)Thinking... (2s elapsed)Thinking... (2s elapsed)Thinking... (3s elapsed)Thinking... (3s elapsed)Thinking... (3s elapsed)Thinking... (3s elapsed)Thinking... (3s elapsed)Thinking... (4s elapsed)Thinking... (4s elapsed)Thinking... (4s elapsed)Thinking... (4s elapsed)Thinking... (4s elapsed)Thinking... (5s elapsed)Thinking... (5s elapsed)Thinking... (5s elapsed)Thinking... (5s elapsed)Thinking... (5s elapsed)Thinking... (6s elapsed)Thinking... (6s elapsed)Thinking... (6s elapsed)Thinking... (6s elapsed)Thinking... (6s elapsed)Thinking... (7s elapsed)Thinking... (7s elapsed)Thinking... (7s elapsed)Thinking... (7s elapsed)Thinking... (7s elapsed)Thinking... (8s elapsed)Thinking... (8s elapsed)Thinking... (8s elapsed)Thinking... (8s elapsed)Thinking... (8s elapsed)Thinking... (9s elapsed)Thinking... (9s elapsed)Thinking... (9s elapsed)Thinking... (9s elapsed)Thinking... (9s elapsed)Thinking... (10s elapsed)Thinking... (10s elapsed)Thinking... (10s elapsed)Thinking... (10s elapsed)Thinking... (10s elapsed)Thinking... (11s elapsed)Thinking... (11s elapsed)Thinking... (11s elapsed)Thinking... (11s elapsed)Thinking... (11s elapsed)Thinking... (12s elapsed)Thinking... (12s elapsed)Thinking... (12s elapsed)Thinking... (12s elapsed)Thinking... (12s elapsed)Thinking... (13s elapsed)Thinking... (13s elapsed)Thinking... (13s elapsed)Thinking... (13s elapsed)Thinking... (13s elapsed)Thinking... (14s elapsed)Thinking... (14s elapsed)Thinking... (14s elapsed)Thinking... (14s elapsed)Thinking... (14s elapsed)Thinking... (15s elapsed)Thinking... (15s elapsed)Thinking... (15s elapsed)Thinking... (15s elapsed)Thinking... (15s elapsed)Thinking... (16s elapsed)Thinking... (16s elapsed)Thinking... (16s elapsed)Thinking... (16s elapsed)Thinking... (16s elapsed)Thinking... (17s elapsed)Thinking... (17s elapsed)Thinking... (17s elapsed)Thinking... (17s elapsed)Thinking... (17s elapsed)Thinking... (18s elapsed)Thinking... (18s elapsed)Thinking... (18s elapsed)Thinking... (18s elapsed)Thinking... (18s elapsed)Thinking... (19s elapsed)Thinking... (19s elapsed)Thinking... (19s elapsed)Thinking... (19s elapsed)Thinking... (19s elapsed)Thinking... (20s elapsed)Thinking... (20s elapsed)Thinking... (20s elapsed)Thinking... (20s elapsed)Thinking... (20s elapsed)Thinking... (21s elapsed)Thinking... (21s elapsed)Thinking... (21s elapsed)Thinking... (21s elapsed)Thinking... (21s elapsed)Thinking... (22s elapsed)Thinking... (22s elapsed)Thinking... (22s elapsed)Thinking... (22s elapsed)Thinking... (22s elapsed)Thinking... (23s elapsed)Thinking... (23s elapsed)Thinking... (23s elapsed)Thinking... (23s elapsed)Thinking... (23s elapsed)Thinking... (24s elapsed)Thinking... (24s elapsed)Thinking... (24s elapsed)Thinking... (24s elapsed)Thinking... (24s elapsed)Thinking... (25s elapsed)Thinking... (25s elapsed)Thinking... (25s elapsed)Thinking... (25s elapsed)Thinking... (25s elapsed)Thinking... (26s elapsed)Thinking... (26s elapsed)Thinking... (26s elapsed)Thinking... (26s elapsed)Thinking... (26s elapsed)Thinking... (27s elapsed)Thinking... (27s elapsed)Thinking... (27s elapsed)Thinking... (27s elapsed)Thinking... (27s elapsed)Thinking... (28s elapsed)Thinking... (28s elapsed)Thinking... (28s elapsed)Thinking... (28s elapsed)Thinking... (28s elapsed)Thinking... (29s elapsed)Thinking... (29s elapsed)Thinking... (29s elapsed)Thinking... (29s elapsed)Thinking... (29s elapsed)Thinking... (30s elapsed)Thinking... (30s elapsed)Thinking... (30s elapsed)Thinking... (30s elapsed)Thinking... (30s elapsed)Thinking... (31s elapsed)Thinking... (31s elapsed)Thinking... (31s elapsed)Thinking... (31s elapsed)Thinking... (31s elapsed)Thinking... (32s elapsed)Thinking... (32s elapsed)Thinking... (32s elapsed)Thinking... (32s elapsed)Thinking... (32s elapsed)Thinking... (33s elapsed)Thinking... (33s elapsed)Thinking... (33s elapsed)Thinking... (33s elapsed)Thinking... (33s elapsed)Thinking... (34s elapsed)Thinking... (34s elapsed)Thinking... (34s elapsed)Thinking... (34s elapsed)Thinking... (34s elapsed)Thinking... (35s elapsed)Thinking... (35s elapsed)Thinking... (35s elapsed)Thinking... (35s elapsed)Thinking... (35s elapsed)Thinking... (36s elapsed)Thinking... (36s elapsed)Thinking... (36s elapsed)Thinking... (36s elapsed)Thinking... (36s elapsed)Thinking... (37s elapsed)Thinking... (37s elapsed)Below is one possible way to formalise the “Edit-Distance” problem in the Java Model Language.  
Only the specification is given; the implementation body may contain any correct
algorithm.

/*------------------------------------------------------------------------
 *  Edit-Distance  (LeetCode #72)
 *------------------------------------------------------------------------*/

public class EditDistance {

    /*------------------------------------------------------------------
     *  Auxiliary (model-only) predicates
     *----------------------------------------------------------------*/

    /*@ public model pure boolean isLowerCaseString(String s) {
      @   return (\forall int i; 0 <= i && i < s.length();
      @                    Character.isLowerCase(s.charAt(i)));
      @ }
      @*/

    /*@ public model pure boolean canTransform(String s1, String s2, int k) {
      @     /*  A recursive mathematical definition of
      @         “there exists a sequence of at most k elementary
      @         insert / delete / replace operations that converts
      @         s1 into s2”.                                 * /
      @
      @     if (k < 0)                return false;
      @     if (s1.equals(s2))        return k == 0;
      @     if (k == 0)               return false;
      @
      @     /*  delete one character                                        * /
      @     boolean del = (\exists int i; 0 <= i && i < s1.length();
      @                      canTransform(
      @                          s1.substring(0,i) + s1.substring(i+1),
      @                          s2, k-1));
      @
      @     /*  insert one lower-case character                             * /
      @     boolean ins = (\exists int i; 0 <= i && i <= s1.length();
      @                        \exists char c; 'a' <= c && c <= 'z';
      @                      canTransform(
      @                          s1.substring(0,i) + c + s1.substring(i),
      @                          s2, k-1));
      @
      @     /*  replace one character                                       * /
      @     boolean rep = (\exists int i; 0 <= i && i < s1.length();
      @                        \exists char c; 'a' <= c && c <= 'z'
      @                                        && c != s1.charAt(i);
      @                      canTransform(
      @                          s1.substring(0,i) + c + s1.substring(i+1),
      @                          s2, k-1));
      @
      @     return del || ins || rep;
      @ }
      @*/


    /*------------------------------------------------------------------
     *  The required method
     *----------------------------------------------------------------*/

    /*@ requires word1 != null && word2 != null;
      @ requires word1.length() <= 500 && word2.length() <= 500;
      @ requires isLowerCaseString(word1) && isLowerCaseString(word2);
      @
      @ ensures  canTransform(word1, word2, \result)
      @      && (\forall int k; 0 <= k && k < \result;
      @                 !canTransform(word1, word2, k));
      @          //  i.e.  \result is the minimum number
      @          //        of allowed operations to convert word1 to word2
      @
      @ assignable \nothing;          //  pure function: no side effects
      @*/
    public /*@ pure @*/ static int minDistance(String word1, String word2) {
        /* implementation goes here */
        throw new UnsupportedOperationException();
    }
}