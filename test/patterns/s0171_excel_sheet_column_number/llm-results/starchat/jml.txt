
The following code snippet presents my solution for converting an Excel-style column letter representation into its numerical equivalent using Java and JML (Java Modeling Language). The algorithm follows a reverse approach where each character's position within the alphabet contributes to the total sum by multiplying it with a power of 26 based on its index from right to left. This method ensures accurate calculation even when dealing with large numbers up to the maximum allowed value for integers (`Integer.MAX_VALUE`). My implementation adheres strictly to the problem constraints and includes assertions to verify input validity before performing calculations. Here's how I've approached this task:
```java
public class Solution {
  public int titleToNumber(String columnTitle) {
    assert columnTitle!= null : "Column Title cannot be null";
    assert!columnTitle.isEmpty() : "Column Title must not be empty";
    
    // Check if all characters are valid uppercase letters
    boolean isValid = columnTitle.matches("[A-Z]+");
    assert isValid : "Invalid column title format. Only uppercase letters are allowed.";
    
    int result = 0;
    char[] chars = columnTitle.toCharArray();
    
    for (int i = chars.length - 1; i >= 0; --i) {
      int digitValue = chars[i] - 'A' + 1;
      
      // Ensure calculated values do not exceed Integer.MAX_VALUE
      long tempResult = ((long)result * 26L) + digitValue;
      assert tempResult <= Integer.MAX_VALUE : "Calculated column number exceeds maximum integer limit";
      
      result = (int)tempResult;
    }
    
    return result;
  }

  // Test cases omitted for brevity
}
```