Here's the JML specification for the "Detect Capital" problem:

```java
public class Solution {
    
    /*@ public normal_behavior
      @ requires word != null;
      @ requires 1 <= word.length() && word.length() <= 100;
      @ requires (\forall int i; 0 <= i && i < word.length(); 
      @           Character.isLetter(word.charAt(i)) &&
      @           (Character.isUpperCase(word.charAt(i)) || 
      @            Character.isLowerCase(word.charAt(i))));
      @ ensures \result == (allCapitals(word) || allLowercase(word) || 
      @                     firstCapitalOnly(word));
      @*/
    public /*@ pure @*/ boolean detectCapitalUse(String word) {
        // Implementation here
    }
    
    /*@ public normal_behavior
      @ requires word != null && word.length() >= 1;
      @ ensures \result == (\forall int i; 0 <= i && i < word.length(); 
      @                     Character.isUpperCase(word.charAt(i)));
      @*/
    private /*@ pure @*/ boolean allCapitals(String word) {
        // Helper method - all letters are capitals
    }
    
    /*@ public normal_behavior
      @ requires word != null && word.length() >= 1;
      @ ensures \result == (\forall int i; 0 <= i && i < word.length(); 
      @                     Character.isLowerCase(word.charAt(i)));
      @*/
    private /*@ pure @*/ boolean allLowercase(String word) {
        // Helper method - all letters are lowercase
    }
    
    /*@ public normal_behavior
      @ requires word != null && word.length() >= 1;
      @ ensures \result == (Character.isUpperCase(word.charAt(0)) &&
      @                     (\forall int i; 1 <= i && i < word.length(); 
      @                      Character.isLowerCase(word.charAt(i))));
      @*/
    private /*@ pure @*/ boolean firstCapitalOnly(String word) {
        // Helper method - only first letter is capital
    }
}
```

Alternative, more compact version without helper methods:

```java
public class Solution {
    
    /*@ public normal_behavior
      @ requires word != null;
      @ requires 1 <= word.length() && word.length() <= 100;
      @ requires (\forall int i; 0 <= i && i < word.length(); 
      @           Character.isLetter(word.charAt(i)) &&
      @           (Character.isUpperCase(word.charAt(i)) || 
      @            Character.isLowerCase(word.charAt(i))));
      @ ensures \result == (
      @     // Case 1: All capitals
      @     (\forall int i; 0 <= i && i < word.length(); 
      @      Character.isUpperCase(word.charAt(i))) ||
      @     // Case 2: All lowercase
      @     (\forall int i; 0 <= i && i < word.length(); 
      @      Character.isLowerCase(word.charAt(i))) ||
      @     // Case 3: First capital, rest lowercase
      @     (Character.isUpperCase(word.charAt(0)) &&
      @      (\forall int i; 1 <= i && i < word.length(); 
      @       Character.isLowerCase(word.charAt(i))))
      @ );
      @*/
    public /*@ pure @*/ boolean detectCapitalUse(String word) {
        // Implementation here
    }
}
```

Key points in this JML specification:

1. **Preconditions (`requires`):**
   - The word is not null
   - Length is between 1 and 100 (inclusive)
   - All characters are English letters (either uppercase or lowercase)

2. **Postcondition (`ensures`):**
   - The result is true if and only if one of the three valid cases holds:
     - All letters are capitals
     - All letters are lowercase
     - Only the first letter is capital (and the rest are lowercase)

3. **Method purity:**
   - The method is marked as `pure`, indicating it has no side effects

4. **Quantifiers:**
   - `\forall` is used to express properties that must hold for all characters in specific ranges

The specification precisely captures the three valid patterns for capital usage as defined in the problem statement.