To convert the given problem description into JML (Java Modeling Language), we need to specify the preconditions, postconditions, and invariants for a method that compares two version numbers. Here's how you might express this in JML:

```java
public class VersionComparator {

    /*@ 
      @ requires version1 != null && version2 != null;
      @ requires version1.length() >= 1 && version1.length() <= 500;
      @ requires version2.length() >= 1 && version2.length() <= 500;
      @ requires (\forall int i; 0 <= i < version1.length(); 
      @           Character.isDigit(version1.charAt(i)) || version1.charAt(i) == '.');
      @ requires (\forall int i; 0 <= i < version2.length(); 
      @           Character.isDigit(version2.charAt(i)) || version2.charAt(i) == '.');
      @ ensures \result == -1 <==> compareVersions(version1, version2) < 0;
      @ ensures \result == 1 <==> compareVersions(version1, version2) > 0;
      @ ensures \result == 0 <==> compareVersions(version1, version2) == 0;
      @*/
    public static int compareVersions(String version1, String version2) {
        // Method implementation goes here
    }

    /*@ 
      @ normal_behavior
      @ ensures \result < 0 <==> (version1 < version2);
      @ ensures \result > 0 <==> (version1 > version2);
      @ ensures \result == 0 <==> (version1 == version2);
      @*/
    private static int compareVersions(String version1, String version2) {
        String[] v1 = version1.split("\\.");
        String[] v2 = version2.split("\\.");
        int length = Math.max(v1.length, v2.length);
        for (int i = 0; i < length; i++) {
            int num1 = i < v1.length ? Integer.parseInt(v1[i]) : 0;
            int num2 = i < v2.length ? Integer.parseInt(v2[i]) : 0;
            if (num1 != num2) {
                return num1 < num2 ? -1 : 1;
            }
        }
        return 0;
    }
}
```

### Explanation:

- **Preconditions (`requires`)**:
  - Both `version1` and `version2` are non-null strings.
  - The lengths of `version1` and `version2` are between 1 and 500.
  - Each character in `version1` and `version2` is either a digit or a dot.

- **Postconditions (`ensures`)**:
  - The result is `-1` if `version1` is less than `version2`.
  - The result is `1` if `version1` is greater than `version2`.
  - The result is `0` if `version1` is equal to `version2`.

- **Method Implementation**:
  - The method splits the version strings by the dot to get individual revisions.
  - It compares each revision as an integer, treating missing revisions as `0`.
  - It returns `-1`, `1`, or `0` based on the comparison of the revisions.

This JML specification ensures that the method adheres to the constraints and expected behavior described in the problem statement.