Here's the JML specification for the "Add Binary" problem:

```java
public class Solution {
    
    /*@
      @ public normal_behavior
      @   requires a != null && b != null;
      @   requires 1 <= a.length() && a.length() <= 10000;
      @   requires 1 <= b.length() && b.length() <= 10000;
      @   requires (\forall int i; 0 <= i && i < a.length(); 
      @             a.charAt(i) == '0' || a.charAt(i) == '1');
      @   requires (\forall int i; 0 <= i && i < b.length(); 
      @             b.charAt(i) == '0' || b.charAt(i) == '1');
      @   requires !a.equals("0") ==> a.charAt(0) != '0';
      @   requires !b.equals("0") ==> b.charAt(0) != '0';
      @   ensures \result != null;
      @   ensures \result.length() >= 1;
      @   ensures (\forall int i; 0 <= i && i < \result.length(); 
      @             \result.charAt(i) == '0' || \result.charAt(i) == '1');
      @   ensures !\result.equals("0") ==> \result.charAt(0) != '0';
      @   ensures binaryToDecimal(\result) == 
      @           binaryToDecimal(a) + binaryToDecimal(b);
      @*/
    public String addBinary(String a, String b) {
        // Implementation here
    }
    
    /*@
      @ public pure helper
      @ requires s != null;
      @ requires s.length() >= 1;
      @ requires (\forall int i; 0 <= i && i < s.length(); 
      @           s.charAt(i) == '0' || s.charAt(i) == '1');
      @ ensures \result >= 0;
      @*/
    /*@ spec_public @*/ private static long binaryToDecimal(String s) {
        long result = 0;
        for (int i = 0; i < s.length(); i++) {
            result = result * 2 + (s.charAt(i) - '0');
        }
        return result;
    }
}
```

Key aspects of this JML specification:

1. **Preconditions (`requires`):**
   - Both input strings must be non-null
   - Length constraints: between 1 and 10,000 characters
   - All characters must be either '0' or '1'
   - No leading zeros (except for the string "0" itself)

2. **Postconditions (`ensures`):**
   - Result is non-null
   - Result has at least one character
   - Result contains only '0' or '1' characters
   - Result has no leading zeros (except for "0")
   - The decimal value of the result equals the sum of decimal values of inputs

3. **Helper method:**
   - `binaryToDecimal` is a pure helper function that converts binary strings to decimal
   - It's marked as `spec_public` so it can be used in the public specification
   - This helper makes the functional correctness assertion cleaner

The specification captures all the constraints from the problem and ensures that the binary addition is performed correctly by verifying that the decimal interpretation of the result equals the sum of the decimal interpretations of the inputs.