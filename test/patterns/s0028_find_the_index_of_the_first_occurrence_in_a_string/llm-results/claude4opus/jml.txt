Here's the JML specification for the strStr() method:

```java
public class Solution {
    
    /*@ public normal_behavior
      @   requires haystack != null && needle != null;
      @   requires 0 <= haystack.length() && haystack.length() <= 50000;
      @   requires 0 <= needle.length() && needle.length() <= 50000;
      @   requires (\forall int i; 0 <= i && i < haystack.length(); 
      @             'a' <= haystack.charAt(i) && haystack.charAt(i) <= 'z');
      @   requires (\forall int i; 0 <= i && i < needle.length(); 
      @             'a' <= needle.charAt(i) && needle.charAt(i) <= 'z');
      @   ensures needle.length() == 0 ==> \result == 0;
      @   ensures needle.length() > 0 && 
      @           (\exists int i; 0 <= i && i <= haystack.length() - needle.length();
      @             (\forall int j; 0 <= j && j < needle.length();
      @               haystack.charAt(i + j) == needle.charAt(j))) ==>
      @           (\result >= 0 && \result <= haystack.length() - needle.length() &&
      @            (\forall int j; 0 <= j && j < needle.length();
      @              haystack.charAt(\result + j) == needle.charAt(j)) &&
      @            (\forall int k; 0 <= k && k < \result;
      @              (\exists int j; 0 <= j && j < needle.length();
      @                haystack.charAt(k + j) != needle.charAt(j) || 
      @                k + j >= haystack.length())));
      @   ensures needle.length() > 0 && 
      @           (\forall int i; 0 <= i && i <= haystack.length() - needle.length();
      @             (\exists int j; 0 <= j && j < needle.length();
      @               haystack.charAt(i + j) != needle.charAt(j))) ==>
      @           \result == -1;
      @   ensures needle.length() > haystack.length() ==> \result == -1;
      @ also
      @ public exceptional_behavior
      @   requires haystack == null || needle == null;
      @   signals_only NullPointerException;
      @*/
    public int strStr(String haystack, String needle) {
        // Implementation goes here
    }
}
```

This JML specification captures:

1. **Preconditions**:
   - Both strings must be non-null
   - Length constraints (0 to 50,000 characters)
   - Both strings contain only lowercase English letters

2. **Postconditions**:
   - If needle is empty, return 0
   - If needle is found in haystack:
     - Result is the index of the first occurrence
     - The substring at that index matches needle completely
     - No earlier index contains a complete match
   - If needle is not found, return -1
   - If needle is longer than haystack, return -1

3. **Exceptional behavior**:
   - Throws NullPointerException if either parameter is null

The specification uses JML's logical operators and quantifiers to precisely define the behavior of finding the first occurrence of a substring.