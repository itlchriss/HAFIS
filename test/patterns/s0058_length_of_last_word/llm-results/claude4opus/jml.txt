Here's the JML specification for the "Length of Last Word" problem:

```java
public class Solution {
    
    /*@ public normal_behavior
      @ requires s != null;
      @ requires 1 <= s.length() && s.length() <= 10000;
      @ requires (\forall int i; 0 <= i && i < s.length(); 
      @           s.charAt(i) == ' ' || Character.isLetter(s.charAt(i)));
      @ requires (\exists int i; 0 <= i && i < s.length(); 
      @           s.charAt(i) != ' ');
      @ ensures \result >= 1;
      @ ensures \result == lastWordLength(s);
      @*/
    public /*@ pure @*/ int lengthOfLastWord(String s) {
        // Implementation here
    }
    
    /*@ public normal_behavior
      @ requires s != null && s.length() > 0;
      @ ensures \result == 
      @   (\let int lastNonSpace = lastNonSpaceIndex(s);
      @    \let int wordStart = lastWordStart(s, lastNonSpace);
      @    lastNonSpace - wordStart + 1);
      @*/
    private /*@ pure @*/ /*@ helper @*/ int lastWordLength(String s) {
        // Helper specification
    }
    
    /*@ public normal_behavior
      @ requires s != null && s.length() > 0;
      @ ensures 0 <= \result && \result < s.length();
      @ ensures s.charAt(\result) != ' ';
      @ ensures (\forall int i; \result < i && i < s.length(); 
      @          s.charAt(i) == ' ');
      @*/
    private /*@ pure @*/ /*@ helper @*/ int lastNonSpaceIndex(String s) {
        // Helper specification
    }
    
    /*@ public normal_behavior
      @ requires s != null && 0 <= endIndex && endIndex < s.length();
      @ requires s.charAt(endIndex) != ' ';
      @ ensures 0 <= \result && \result <= endIndex;
      @ ensures s.charAt(\result) != ' ';
      @ ensures \result == 0 || s.charAt(\result - 1) == ' ';
      @ ensures (\forall int i; \result <= i && i <= endIndex; 
      @          s.charAt(i) != ' ');
      @*/
    private /*@ pure @*/ /*@ helper @*/ int lastWordStart(String s, int endIndex) {
        // Helper specification
    }
}
```

Alternative, more concise version without helper methods:

```java
public class Solution {
    
    /*@ public normal_behavior
      @ requires s != null;
      @ requires 1 <= s.length() && s.length() <= 10000;
      @ requires (\forall int i; 0 <= i && i < s.length(); 
      @           s.charAt(i) == ' ' || Character.isLetter(s.charAt(i)));
      @ requires (\exists int i; 0 <= i && i < s.length(); 
      @           s.charAt(i) != ' ');
      @ ensures \result >= 1;
      @ ensures (\exists int start, end; 
      @           0 <= start && start <= end && end < s.length() &&
      @           s.charAt(end) != ' ' &&
      @           (start == 0 || s.charAt(start - 1) == ' ') &&
      @           (\forall int i; start <= i && i <= end; s.charAt(i) != ' ') &&
      @           (\forall int i; end < i && i < s.length(); s.charAt(i) == ' ') &&
      @           \result == end - start + 1);
      @*/
    public /*@ pure @*/ int lengthOfLastWord(String s) {
        // Implementation here
    }
}
```

Key aspects of the JML specification:

1. **Preconditions (`requires`):**
   - String is not null
   - Length is between 1 and 10,000
   - String contains only letters and spaces
   - At least one non-space character exists (guaranteeing at least one word)

2. **Postconditions (`ensures`):**
   - Result is at least 1 (since there's at least one word)
   - The result corresponds to the length of the last word, defined as:
     - A contiguous sequence of non-space characters
     - That appears after all other words in the string
     - Where no non-space characters appear after it (except possibly trailing spaces)

3. **Method purity:**
   - The method is marked as `pure`, indicating it has no side effects

The specification captures the essence of finding the last word by identifying the rightmost sequence of non-space characters and computing its length.