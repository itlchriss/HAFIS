Thinking...Thinking...Thinking...Thinking...Thinking...Thinking... (1s elapsed)Thinking... (1s elapsed)Thinking... (1s elapsed)Thinking... (1s elapsed)Thinking... (1s elapsed)Thinking... (2s elapsed)Thinking... (2s elapsed)Thinking... (2s elapsed)Thinking... (2s elapsed)Thinking... (2s elapsed)Thinking... (3s elapsed)Thinking... (3s elapsed)Thinking... (3s elapsed)Thinking... (3s elapsed)Thinking... (3s elapsed)Thinking... (4s elapsed)Thinking... (4s elapsed)Thinking... (4s elapsed)Thinking... (4s elapsed)Thinking... (4s elapsed)Thinking... (5s elapsed)Thinking... (5s elapsed)Thinking... (5s elapsed)Thinking... (5s elapsed)Thinking... (5s elapsed)Thinking... (6s elapsed)Thinking... (6s elapsed)Thinking... (6s elapsed)Thinking... (6s elapsed)Thinking... (6s elapsed)Thinking... (7s elapsed)Thinking... (7s elapsed)Thinking... (7s elapsed)Thinking... (7s elapsed)Thinking... (7s elapsed)Thinking... (8s elapsed)Thinking... (8s elapsed)Thinking... (8s elapsed)Thinking... (8s elapsed)Thinking... (8s elapsed)Thinking... (9s elapsed)Thinking... (9s elapsed)Thinking... (9s elapsed)Thinking... (9s elapsed)Thinking... (9s elapsed)Thinking... (10s elapsed)Thinking... (10s elapsed)Thinking... (10s elapsed)Thinking... (10s elapsed)Thinking... (10s elapsed)Thinking... (11s elapsed)Thinking... (11s elapsed)Thinking... (11s elapsed)Thinking... (11s elapsed)Thinking... (11s elapsed)Thinking... (12s elapsed)Thinking... (12s elapsed)Thinking... (12s elapsed)Thinking... (12s elapsed)Thinking... (12s elapsed)Thinking... (13s elapsed)Thinking... (13s elapsed)Thinking... (13s elapsed)Thinking... (13s elapsed)Thinking... (13s elapsed)Thinking... (14s elapsed)Thinking... (14s elapsed)Thinking... (14s elapsed)Thinking... (14s elapsed)Thinking... (14s elapsed)Thinking... (15s elapsed)Thinking... (15s elapsed)Thinking... (15s elapsed)Thinking... (15s elapsed)Thinking... (15s elapsed)Thinking... (16s elapsed)Thinking... (16s elapsed)Thinking... (16s elapsed)Thinking... (16s elapsed)Thinking... (16s elapsed)Thinking... (17s elapsed)Thinking... (17s elapsed)Thinking... (17s elapsed)Thinking... (17s elapsed)Thinking... (17s elapsed)Thinking... (18s elapsed)Thinking... (18s elapsed)Thinking... (18s elapsed)Thinking... (18s elapsed)Thinking... (18s elapsed)Thinking... (19s elapsed)Thinking... (19s elapsed)Thinking... (19s elapsed)Thinking... (19s elapsed)Thinking... (19s elapsed)Thinking... (20s elapsed)Thinking... (20s elapsed)Thinking... (20s elapsed)Thinking... (20s elapsed)Thinking... (20s elapsed)Thinking... (21s elapsed)Thinking... (21s elapsed)Thinking... (21s elapsed)Thinking... (21s elapsed)Thinking... (21s elapsed)Thinking... (22s elapsed)Thinking... (22s elapsed)Thinking... (22s elapsed)Thinking... (22s elapsed)Thinking... (22s elapsed)Thinking... (23s elapsed)Below is an example of how the informal problem statement can be expressed as a precise
J M L contract for a Java method that decides whether an
array of bytes (stored in `int` values) is a legal UTF-8 sequence.

Only the specification is given – an implementation that satisfies the
contract can be written in any convenient way.

/*======================================================================
  UTF-8 validator – J M L specification only
  ----------------------------------------------------------------------
  1.  The public method validUtf8(...) has to return exactly the value
      delivered by the pure model operation utf8ValidModel(...).

  2.  utf8ValidModel(...) is written in ordinary Java and can therefore
      be executed by a run-time assertion checker.  Because it is
      declared as  “model pure” it may be used in other J M L clauses
      but will never be part of the compiled code.
 ======================================================================*/

public class UTF8Validator {

    /*------------------------------------------------------------------
      Helper predicates                                                   
      ------------------------------------------------------------------*/

    /*@ public static pure boolean isAscii        (int b) { return (b & 0x80) == 0x00; } @*/
    /*@ public static pure boolean isLeadOf2Bytes (int b) { return (b & 0xE0) == 0xC0; } @*/
    /*@ public static pure boolean isLeadOf3Bytes (int b) { return (b & 0xF0) == 0xE0; } @*/
    /*@ public static pure boolean isLeadOf4Bytes (int b) { return (b & 0xF8) == 0xF0; } @*/
    /*@ public static pure boolean isContinuation (int b) { return (b & 0xC0) == 0x80; } @*/


    /*------------------------------------------------------------------
      A pure model operation that *defines* what “being valid UTF-8”
      means.  The public routine has to return the same truth value.
      ------------------------------------------------------------------*/
    /*@ public static model pure boolean utf8ValidModel (int[] bytes) {
          int expected = 0;                       // pending continuation bytes
          for (int i = 0; i < bytes.length; i++) {
              int b = bytes[i];

              // while waiting for a leading byte
              if (expected == 0) {
                  if      (isAscii(b))             { expected = 0;              }
                  else if (isLeadOf2Bytes(b))      { expected = 1;              }
                  else if (isLeadOf3Bytes(b))      { expected = 2;              }
                  else if (isLeadOf4Bytes(b))      { expected = 3;              }
                  else                             { return false;              }
              }
              // inside a multi–byte character
              else {
                  if (!isContinuation(b))          { return false;              }
                  --expected;
              }
          }
          return expected == 0;                    // no trailing debt allowed
      } @*/


    /*------------------------------------------------------------------
      The public routine whose behaviour is specified completely by JML
      ------------------------------------------------------------------*/
    /*@ public normal_behavior
          // -------------  Pre–conditions  --------------------------------
          requires data != null;
          requires 1            <= data.length && data.length <= 20000;
          requires (\forall int i; 0 <= i && i < data.length;
                                  0 <= data[i] && data[i] <= 255);

          // -------------  Post–condition  --------------------------------
          ensures  \result == utf8ValidModel(data);

          // -------------  Assignable clause  -----------------------------
          assignable \nothing;                        // pure function
      @*/
    public static boolean validUtf8 (int[] data);
}