Here's the JML specification for the given problem:

```java
public class Solution {
    
    /*@ public normal_behavior
      @ requires arr != null;
      @ requires arr.length >= 3;
      @ requires arr.length <= 50000;
      @ requires (\forall int k; 0 <= k && k < arr.length; 
      @           -10000 <= arr[k] && arr[k] <= 10000);
      @ ensures \result <==> 
      @   (\exists int i, j; 0 <= i && i < j - 1 && j < arr.length;
      @     sum(arr, 0, i) == sum(arr, i + 1, j - 1) && 
      @     sum(arr, i + 1, j - 1) == sum(arr, j, arr.length - 1));
      @ assignable \nothing;
      @*/
    public boolean canThreePartsEqualSum(int[] arr) {
        // Implementation here
    }
    
    /*@ public normal_behavior
      @ requires arr != null;
      @ requires 0 <= start && start <= end && end <= arr.length;
      @ ensures \result == (\sum int k; start <= k && k <= end; arr[k]);
      @ assignable \nothing;
      @ helper
      @*/
    /*@ spec_public @*/ private static /*@ pure @*/ int sum(int[] arr, int start, int end) {
        int sum = 0;
        /*@ loop_invariant start <= i && i <= end + 1;
          @ loop_invariant sum == (\sum int k; start <= k && k < i; arr[k]);
          @ decreases end + 1 - i;
          @*/
        for (int i = start; i <= end; i++) {
            sum += arr[i];
        }
        return sum;
    }
}
```

Key points in this JML specification:

1. **Preconditions (`requires`)**:
   - The array must not be null
   - Array length must be at least 3 (to have three non-empty parts)
   - Array length must not exceed 50,000
   - Each element must be between -10,000 and 10,000

2. **Postcondition (`ensures`)**:
   - Returns true if and only if there exist indices `i` and `j` such that:
     - `0 <= i < j - 1 < arr.length` (ensures three non-empty parts)
     - The sum of the first part equals the sum of the second part
     - The sum of the second part equals the sum of the third part

3. **Helper method**:
   - A pure helper method `sum` is defined to calculate the sum of array elements in a given range
   - This makes the specification more readable and modular

4. **Frame condition**:
   - `assignable \nothing` indicates that the method doesn't modify any state

The specification captures the essence of partitioning the array into three non-empty parts with equal sums, where the partitions are defined by indices `i` and `j` as described in the problem statement.