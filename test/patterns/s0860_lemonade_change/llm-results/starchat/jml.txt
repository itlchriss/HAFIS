
The following code snippet presents my solution for determining whether it's possible to serve every customer with accurate change given their respective payment amounts using Java and the formal specification language JML. The algorithm maintains counters for the number of five-dollar and ten-dollar bills encountered thus far while iterating through the input array representing the customers' orders. By applying assertions within the loop, I ensure that the conditions required for providing correct change are metâ€”specifically, there should be enough money available when a twenty-dollar bill comes in. If these checks pass throughout the entire iteration, the function returns `true`; otherwise, it returns `false`. This approach ensures that no customer receives incorrect change, adhering strictly to the problem constraints provided. My implementation follows best practices for writing clear and concise code, making use of meaningful variable names and avoiding unnecessary complexity.
```java
public class Solution {
    public boolean lemonadeChange(int[] bills) {
        int fiveDollars = 0;
        int tenDollars = 0;

        for (int bill : bills) {
            if (bill == 5) {
                fiveDollars++;
            } else if (bill == 10) {
                assert fiveDollars > 0; // Ensure there is at least one five dollar bill before giving change
                fiveDollars--;
                tenDollars++;
            } else {
                assert bill == 20;

                if (tenDollars > 0 && fiveDollars > 0) {
                    // Give change as 10 + 5
                    tenDollars--;
                    fiveDollars--;
                } else {
                    // Otherwise, give change as 5 + 5 + 5
                    assert fiveDollars >= 3;
                    fiveDollars -= 3;
                }
            }
        }

        return true;
    }
}
```