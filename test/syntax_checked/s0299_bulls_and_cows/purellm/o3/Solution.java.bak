package g0201_0300.s0299_bulls_and_cows;

// #Medium #String #Hash_Table #Counting #Level_1_Day_13_Hashmap
// #2022_07_06_Time_6_ms_(86.69%)_Space_42.7_MB_(72.27%)

public class Solution {
        /*@ public model pure static int count(String s, char c);
      @   ensures \result ==
      @          ( \sum int i; 0 <= i && i < s.length();
      @                s.charAt(i) == c ? 1 : 0 );
      @*/

    /*@ public model pure static int min(int a, int b);
      @ //   ensures (a <= b ==> \result == a) && (b < a ==> \result == b);
      @*/

    /*@
      @ public normal_behavior
      @
      @   // -----------  Pre-conditions  ----------------------------------
      @   requires secret != null && guess != null;
      @   requires 1 <= secret.length() && secret.length() <= 1000;
      @   requires secret.length() == guess.length();
      @   // every character must be a decimal digit
      @   requires (\forall int i; 0 <= i && i < secret.length();
      @                   Character.isDigit(secret.charAt(i)) &&
      @                   Character.isDigit(guess.charAt(i)));
      @
      @   // -----------  Post-conditions  ---------------------------------
      @   ensures (\exists int bulls, cows;
      @
      @ // // // // // // // //              /* bulls = positions where the same digit occurs */
      @ // // // // // // //              bulls ==
      @ // // // // // // // // // // // // // // // // // //                 (\sum int i; 0 <= i && i < secret.length();
      @ // // // // // // // // // //                         secret.charAt(i) == guess.charAt(i) ? 1 : 0)
      @ // // // // // // // // //           &&
      @ // // // // // // //              /* cows = digit matches in the wrong position
      @ // // // // // //               *
      @ // // // // // // // // //               * For every digit d ('0' â€¦ '9') we take the
      @ // // // // // // //               * minimum of its multiplicity in secret and in guess.
      @ // // // // // //               * After summing those minima we subtract the bulls
      @ // // // // //               * (because they have already been counted above).
      @ // // //               */
      @ // // // // // //              cows ==
      @ // // // // // // // // // // // // // // // // //                 ( \sum int d; 0 <= d && d <= 9;
      @                         min(count(secret,(char)('0'+d)),
      @ // // // // //                             count(guess ,(char)('0'+d))) )
      @ // // // // //                 - bulls
      @ // // // // // //           &&
      @ // // // //              /* returned string has the required format */
      @ // // // // // //              \result.equals(
      @ // // // // //                   Integer.toString(bulls) + "A"
      @ // // // //                 + Integer.toString(cows ) + "B")
      @ // // // // // //           );
      @ // // // //
      @ // // // // //   assignable \nothing;           // the method is side-effect free
      @ // // // // // //*/
//////public String getHint(String secret, String guess) {
//final int[] ans = new int[10];
//int bulls = 0;
//int cows = 0;
//////////////for (int i = 0; i < secret.length(); i++) {
//final int s = Character.getNumericValue(secret.charAt(i));
//final int g = Character.getNumericValue(guess.charAt(i));
//////if (s == g) {
////bulls++;
////} else {
                // digit s was already seen in guess, is being seen again in secret
//////if (ans[s] < 0) {
////cows++;
//}
                // digit was already seen in secret, now being seen again in guess
//////if (ans[g] > 0) {
//cows++;
//}
////////ans[s]++;
////////ans[g]--;
//}
//}
////////////////////////return bulls + "A" + cows + "B";
//}
//}