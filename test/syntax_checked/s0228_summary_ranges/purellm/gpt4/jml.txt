To convert the given problem description into JML (Java Modeling Language), we need to specify the preconditions, postconditions, and invariants for the method that solves the problem. Here's a possible JML specification for a method `summaryRanges` that takes an integer array `nums` and returns a list of strings representing the ranges:

```java
/*@
  @ requires nums != null;
  @ requires (\forall int i; 0 <= i && i < nums.length - 1; nums[i] < nums[i + 1]);
  @ ensures (\forall int i; 0 <= i && i < \result.size();
  @            (\exists int a, b; 0 <= a && a <= b && b < nums.length;
  @                (\forall int j; a <= j && j <= b; nums[j] == nums[a] + (j - a)) &&
  @                (b == nums.length - 1 || nums[b] + 1 < nums[b + 1]) &&
  @                (a == 0 || nums[a] > nums[a - 1] + 1) &&
  @                \result.get(i).equals(
  @                    (a == b) ? Integer.toString(nums[a]) : (nums[a] + "->" + nums[b])
  @                )
  @            )
  @         );
  @ ensures (\forall int i; 0 <= i && i < nums.length;
  @            (\exists int j; 0 <= j && j < \result.size();
  @                \result.get(j).contains(Integer.toString(nums[i]))
  @            )
  @         );
  @ ensures (\forall int j; 0 <= j && j < \result.size();
  @            (\forall int x; Integer.parseInt(\result.get(j).split("->")[0]) <= x &&
  @                             x <= Integer.parseInt(\result.get(j).split("->")[\result.get(j).split("->").length - 1]);
  @                (\exists int i; 0 <= i && i < nums.length; nums[i] == x)
  @            )
  @         );
  @*/
public List<String> summaryRanges(int[] nums) {
    // Method implementation goes here
}
```

### Explanation:

- **Preconditions (`requires`)**:
  - The input array `nums` must not be null.
  - The array `nums` must be sorted in strictly increasing order, which is ensured by checking that each element is less than the next.

- **Postconditions (`ensures`)**:
  - For each element in the result list, there exists a range `[a, b]` such that:
    - All elements from `nums[a]` to `nums[b]` are consecutive.
    - The range ends at `b` if `b` is the last element or if the next element is not consecutive.
    - The range starts at `a` if `a` is the first element or if the previous element is not consecutive.
    - The string representation of the range matches the required format.
  - Every element in `nums` is covered by at least one range in the result.
  - Every integer in each range in the result corresponds to an element in `nums`.

This JML specification provides a formal contract for the `summaryRanges` method, ensuring it behaves as expected according to the problem description.