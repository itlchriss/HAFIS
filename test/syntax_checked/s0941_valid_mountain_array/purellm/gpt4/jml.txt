To convert the given problem description into JML (Java Modeling Language), we need to specify the preconditions, postconditions, and invariants that describe the behavior of the function that checks if an array is a valid mountain array. Here's how you can express this in JML:

```java
public class MountainArray {

    /*@ 
      @ public normal_behavior
      @ requires arr != null;
      @ requires arr.length >= 1 && arr.length <= 10000;
      @ requires (\forall int i; 0 <= i < arr.length; 0 <= arr[i] && arr[i] <= 10000);
      @ ensures \result <==> (
      @     arr.length >= 3 &&
      @     (\exists int i; 0 < i < arr.length - 1;
      @         (\forall int j; 0 <= j < i; arr[j] < arr[j + 1]) &&
      @         (\forall int k; i <= k < arr.length - 1; arr[k] > arr[k + 1])
      @     )
      @ );
      @*/
    public static boolean isValidMountainArray(int[] arr) {
        if (arr.length < 3) return false;

        int i = 0;
        // walk up
        while (i + 1 < arr.length && arr[i] < arr[i + 1]) {
            i++;
        }

        // peak can't be first or last
        if (i == 0 || i == arr.length - 1) return false;

        // walk down
        while (i + 1 < arr.length && arr[i] > arr[i + 1]) {
            i++;
        }

        return i == arr.length - 1;
    }
}
```

### Explanation:

- **Preconditions (`requires`)**:
  - The array `arr` should not be null.
  - The length of `arr` should be between 1 and 10,000.
  - Each element in `arr` should be between 0 and 10,000.

- **Postconditions (`ensures`)**:
  - The result is `true` if and only if:
    - The length of `arr` is at least 3.
    - There exists an index `i` such that:
      - All elements before `i` are strictly increasing.
      - All elements from `i` onwards are strictly decreasing.

This JML specification describes the expected behavior of the `isValidMountainArray` method, ensuring that it correctly identifies valid mountain arrays according to the given problem statement.