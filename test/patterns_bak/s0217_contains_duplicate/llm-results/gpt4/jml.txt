To convert the given problem description into JML (Java Modeling Language), we need to specify the preconditions, postconditions, and invariants for a method that solves the problem. Here's how you can express this in JML:

```java
public class ContainsDuplicate {

    /*@ 
      @ requires nums != null;
      @ requires nums.length >= 1 && nums.length <= 100000;
      @ requires (\forall int i; 0 <= i < nums.length; -1000000000 <= nums[i] && nums[i] <= 1000000000);
      @ ensures \result == true <==> (\exists int i, j; 0 <= i < j < nums.length; nums[i] == nums[j]);
      @ ensures \result == false <==> (\forall int i, j; 0 <= i < j < nums.length; nums[i] != nums[j]);
      @*/
    public static boolean containsDuplicate(int[] nums) {
        // Method implementation
    }
}
```

### Explanation:

- **Preconditions (`requires`)**:
  - `nums != null`: The input array `nums` should not be null.
  - `nums.length >= 1 && nums.length <= 100000`: The length of the array should be between 1 and 100,000.
  - `(\forall int i; 0 <= i < nums.length; -1000000000 <= nums[i] && nums[i] <= 1000000000)`: Each element in the array should be within the range of -10^9 to 10^9.

- **Postconditions (`ensures`)**:
  - `\result == true <==> (\exists int i, j; 0 <= i < j < nums.length; nums[i] == nums[j])`: The method should return `true` if there exist indices `i` and `j` such that `nums[i] == nums[j]` and `i < j`.
  - `\result == false <==> (\forall int i, j; 0 <= i < j < nums.length; nums[i] != nums[j])`: The method should return `false` if for all indices `i` and `j`, `nums[i] != nums[j]` when `i < j`.

This JML specification describes the expected behavior of the `containsDuplicate` method, ensuring it adheres to the problem's requirements.