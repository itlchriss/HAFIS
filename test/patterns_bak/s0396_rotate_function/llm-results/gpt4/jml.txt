```jml
/*
 * 396. Rotate Function
 * 
 * Medium
 * 
 * You are given an integer array `nums` of length `n`.
 * 
 * Assume arr_k to be an array obtained by rotating `nums` by `k` positions clock-wise. 
 * We define the rotation function `F` on `nums` as follows:
 * 
 * F(k) = 0 * arr_k[0] + 1 * arr_k[1] + ... + (n - 1) * arr_k[n - 1].
 * 
 * Return the maximum value of F(0), F(1), ..., F(n-1).
 * 
 * The test cases are generated so that the answer fits in a 32-bit integer.
 * 
 * Example 1:
 * 
 * Input: nums = [4,3,2,6]
 * Output: 26
 * 
 * Explanation:
 * F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
 * F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
 * F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
 * F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
 * 
 * So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.
 * 
 * Example 2:
 * 
 * Input: nums = [100]
 * Output: 0
 * 
 * Constraints:
 * 
 * n == nums.length
 * 1 <= n <= 10^5
 * -100 <= nums[i] <= 100
 */

public class RotateFunction {

    /*@ public normal_behavior
      @ requires nums != null;
      @ requires nums.length >= 1 && nums.length <= 100000;
      @ requires (\forall int i; 0 <= i && i < nums.length; -100 <= nums[i] && nums[i] <= 100);
      @ ensures \result == (\max int k; 0 <= k && k < nums.length; F(nums, k));
      @*/
    public int maxRotateFunction(int[] nums) {
        int n = nums.length;
        int sum = 0;
        int F = 0;
        
        // Calculate initial F(0) and sum of elements
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            F += i * nums[i];
        }
        
        int maxF = F;
        
        // Calculate F(k) for k = 1 to n-1
        for (int k = 1; k < n; k++) {
            F = F + sum - n * nums[n - k];
            maxF = Math.max(maxF, F);
        }
        
        return maxF;
    }
    
    /*@ private normal_behavior
      @ requires nums != null;
      @ requires nums.length >= 1 && nums.length <= 100000;
      @ requires (\forall int i; 0 <= i && i < nums.length; -100 <= nums[i] && nums[i] <= 100);
      @ requires 0 <= k && k < nums.length;
      @ ensures \result == (\sum int i; 0 <= i && i < nums.length; i * nums[(i + k) % nums.length]);
      @*/
    private int F(int[] nums, int k) {
        int n = nums.length;
        int result = 0;
        for (int i = 0; i < n; i++) {
            result += i * nums[(i + k) % n];
        }
        return result;
    }
}
```